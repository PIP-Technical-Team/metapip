[{"path":"https://pip-technical-team.github.io/metapip/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 metapip authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pip-technical-team.github.io/metapip/articles/package-specific-options.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"package-specific-options","text":"metapip R package allows work efficiently pip packages. explained README file lot functionality provided metapip. Many functions branch argument. vignette explore different options passing branch names functions.","code":""},{"path":"https://pip-technical-team.github.io/metapip/articles/package-specific-options.html","id":"main-content","dir":"Articles","previous_headings":"","what":"Main content","title":"package-specific-options","text":"Let’s take get_branch_info() function example. 3 ways branch name ordered increasing priority. Pass branch name explicitly. take branch value “DEV” irrespective settings. Use package specific options set default branch package. enabled feature set custom default branches package using function set_custom_branch function sets option() background used determine default branch. now call get_branch_info(package = \"pipapi\") check option() value set get “DEV_v3” default branch. Use generic default branch. Finally, options passed/set use getOption(metapip.default_branch) default branch PIP packages unless custom default branch set. default setting load metapip package defined file zzz.R Moreover, come function init_metapip() checks default branches PIP packages provides option update . Please try package functions let us know think .","code":"get_branch_info(package = \"pipapi\", branch = \"DEV\") set_custom_branch(pipr = 'main', 'pipapi' = 'DEV_v3') metapip_default_options <- list(   metapip.default_branch = \"DEV_v2\",   metapip.custom_branch = list(     pipapi_branch = \"DEV\",     pipfaker_branch = \"main\",     wbpip_branch = \"DEV\",     pipster_branch = \"DEV\",     pipdata_branch = \"DEV\"   ) )"},{"path":"https://pip-technical-team.github.io/metapip/articles/package_development.html","id":"metapip-managing-pip-ecosystem-packages-for-development","dir":"Articles","previous_headings":"","what":"metapip: Managing PIP Ecosystem Packages for Development","title":"metapip in package development","text":"metapip package designed make easy manage packages PIP ecosystem. especially useful package development, PIP packages depend —notably, like pipfun, provides shared utilities. Coordinating branches versions across packages essential smooth development workflow.","code":""},{"path":"https://pip-technical-team.github.io/metapip/articles/package_development.html","id":"default-and-custom-branches","dir":"Articles","previous_headings":"","what":"Default and Custom Branches","title":"metapip in package development","text":"use recent version package, ’s important know branch considered default package. default, branch available get_default_branch(), can modify set_default_branch(). example: However, packages’ recent versions available branch. Packages use default branch tracked “custom branches.” can see get_custom_branch():","code":"get_default_branch() #> [1] \"DEV_v2\" set_default_branch(\"DEV\") get_custom_branch() #>  #> ── metapip custom branches: ── #>  #> ◌ pipapi  : DEV  #> ◌ pipfaker: main #> ◌ wbpip   : DEV  #> ◌ pipster : DEV"},{"path":"https://pip-technical-team.github.io/metapip/articles/package_development.html","id":"inspecting-and-modifying-branch-assignments","dir":"Articles","previous_headings":"","what":"Inspecting and Modifying Branch Assignments","title":"metapip in package development","text":"see PIP ecosystem packages currently assigned branches, use get_current_branches(). get branch specific package, use get_package_current_branch(package). example: need change working branch package, use set_custom_branch(). example, set pipdata package use main branch pipapi use DEV_v3:","code":"get_current_branches() #> ── metapip current branches (default in red): ── #>  #> ◌ pipapi  : DEV    #> ◌ pipload : DEV_v2 #> ◌ wbpip   : DEV    #> ◌ pipfun  : DEV_v2 #> ◌ pipdata : DEV_v2 #> ◌ pipster : DEV    #> ◌ pipaux  : DEV_v2 #> ◌ pipfaker: main get_package_current_branch(\"pipdata\") #>  pipdata  #> \"DEV_v2\" set_custom_branch(pipdata = 'main', pipapi = 'DEV_v3') #> ── metapip custom branches: ── #>  #> ◌ pipapi  : DEV_v3 #> ◌ pipfaker: main   #> ◌ wbpip   : DEV    #> ◌ pipster : DEV    #> ◌ pipdata : main"},{"path":"https://pip-technical-team.github.io/metapip/articles/package_development.html","id":"listing-core-packages","dir":"Articles","previous_headings":"","what":"Listing Core Packages","title":"metapip in package development","text":"get list core PIP packages, use:","code":"get_core_pagkages() #> [1] \"pipapi\"   \"pipload\"  \"wbpip\"    \"pipfun\"   \"pipdata\"  \"pipster\"  \"pipaux\"   #> [8] \"pipfaker\""},{"path":"https://pip-technical-team.github.io/metapip/articles/package_development.html","id":"package-development-workflow","dir":"Articles","previous_headings":"","what":"Package Development Workflow","title":"metapip in package development","text":"developing PIP package, important ensure using recent versions PIP ecosystem packages, appropriate default branch. Typically, can achieve running metapip::update_pip_packages(), updates core PIP packages except one currently developing. want update attach (.e., load library()) PIP packages, use metapip::init_metapip(). functions automatically detect current working directory exclude package developing updates attachment. behavior managed get_core_pagkages() function. default, returns core PIP packages. However, called exclude = NA, checks working directory PIP package excludes list. example, working pipapi package, get_core_pagkages(exclude = NA) return core packages except pipapi. ensures accidentally update reload package actively developing. following explains logic behind process. use code.","code":"# the same as get_core_pagkages() because the working directory  # is not a PIP package get_core_pagkages(exclude = NA) #> [1] \"pipapi\"   \"pipload\"  \"wbpip\"    \"pipfun\"   \"pipdata\"  \"pipster\"  \"pipaux\"   #> [8] \"pipfaker\"  withr::with_dir(   # Change working directory to fake pipapi   fs::path_temp() |>    fs::path(\"pipapi\") |>    fs::dir_create(),      # Since the working directory is a PIP package,    # it will be excluded    get_core_pagkages(NA)) #> [1] \"pipload\"  \"wbpip\"    \"pipfun\"   \"pipdata\"  \"pipster\"  \"pipaux\"   \"pipfaker\""},{"path":"https://pip-technical-team.github.io/metapip/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andrés Castañeda. Author, maintainer. Ronak Shah. Author. World Bank. Copyright holder.","code":""},{"path":"https://pip-technical-team.github.io/metapip/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castañeda R, Shah R (2025). metapip: Easily Install, Load, manage PIP Packages. R package version 0.0.1, https://github.com/PIP-Technical-Team/metapip.","code":"@Manual{,   title = {metapip: Easily Install, Load, and manage PIP Packages},   author = {R.Andrés Castañeda and Ronak Shah},   year = {2025},   note = {R package version 0.0.1},   url = {https://github.com/PIP-Technical-Team/metapip}, }"},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"metapip","dir":"","previous_headings":"","what":"Easily Install, Load, and manage PIP Packages","title":"Easily Install, Load, and manage PIP Packages","text":"goal metapip provide user set functions allow /work efficiently PIP R packages. technical world PIP consist several packages interact load, format, modify, estimate data PIP system. Given number packages increased time, necessary create meta package whose objective proper management PIP packages. metapip highly inspired {tidyverse}, functions just simple refactoring tidyverse functions. credit, , goes Tidyerse team. Thank ! addition basic functionality attaching installing PIP-related R packages, metapip also works manager packages working environment always working right version PIP packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"core-packages","dir":"","previous_headings":"","what":"Core packages","title":"Easily Install, Load, and manage PIP Packages","text":"core PIP R packages pipapi pipaux pipload wbpip pipfun pipdata pipr","code":""},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Install, Load, and manage PIP Packages","text":"can install development version metapip GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"PIP-Technical-Team/metapip\")"},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"setting-up-default-branch-in-metapip","dir":"","previous_headings":"","what":"Setting up default branch in metapip","title":"Easily Install, Load, and manage PIP Packages","text":"metapip different ways set default branches. default uses options(metapip.default_branch) provide default branch value packages. load package set “DEV_v2”. can override default setting per package basis updating options custom default branch like options(metapip.custom_branch = list(pipapi_branch = \"DEV\", pipfaker_branch = \"main\")). case, default value pipapi branch “DEV” whereas one pipfaker set “main”. rest pip core packages remains “DEV_v2”.","code":""},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"functions-and-its-usage-in-metapip","dir":"","previous_headings":"","what":"Functions and it’s usage in metapip","title":"Easily Install, Load, and manage PIP Packages","text":"Since metapip works Github API, need make sure GitHub credentials properly set R environment. best way using gitcreds package. may find simple explanation can generate token set . can check credentials properly set running following command. Let us now go functions metapip. get_branches() function name suggests gives available branches particular pip package GitHub. display console available branches. time also returns branch name character vector invisibly. argument called display set TRUE default. argument controls want show branch names console . install_branch() installs specific branch particular package. command install DEV branch wbpip package. get_branch_info() function give information particular branch package. example, last commit done branch . may pass one branch names. install_latest_branch() function installs packages branch last updated .e latest branch. pass arguments , install latest branch pip core R packages. However, can also restrict packages well. core_metadata() Get metadata information pip packages. install_pip_packages() Install one core packages specific branch. fresh installation R running install_pip_packages() set pip packages. init_metapip() function checks default branches packages ensures --date. , provides option update single stroke. set_custom_branch() easier way set options() pip packages custom default branch. functionally equivalent options(metapip.custom_branch = list(pipr_branch = \"main\", pipapi_branch = \"DEV_v3\")).","code":"library(metapip) check_github_token() |>    print() get_branches(\"pipr\")     #── These are available branches for pipr package:   #• 29-website-formatting #• 61_global_end #• DEV #• add_retry #• default_options #• fix_popshare #• gh-pages #• httr2 #• main #• test out <- get_branches(\"pipr\")  #── These are available branches for pipr package:   #• 29-website-formatting #• 61_global_end #• DEV #• add_retry #• default_options #• fix_popshare #• gh-pages #• httr2 #• main #• test  out #[1] \"29-website-formatting\" \"61_global_end\"         \"DEV\"                   \"add_retry\"             #[5] \"default_options\"       \"fix_popshare\"          \"gh-pages\"              \"httr2\"                 #[9] \"main\"                  \"test\" out <- get_branches(\"pipr\", display = FALSE)   out #[1] \"29-website-formatting\" \"61_global_end\"         \"DEV\"                   \"add_retry\"             #[5] \"default_options\"       \"fix_popshare\"          \"gh-pages\"              \"httr2\"                 #[9] \"main\"                  \"test\" install_branch(package = \"wbpip\", branch = \"DEV\") get_branch_info(package = \"pipr\", branch = \"DEV\")  #  package branch_name last_commit_author_name     last_update_time #1    pipr         DEV               Tony Fujs 2023-09-04T13:06:47Z get_branch_info(package = \"wbpip\", branch = c(\"PROD\", \"QA\"))  #  package branch_name last_commit_author_name     last_update_time #1   wbpip        PROD               Tony Fujs 2023-09-20T08:02:24Z #2   wbpip          QA                tonyfujs 2023-07-14T08:50:33Z install_latest_branch() install_latest_branch(c(\"pipfun\", \"pipapi\")) out <- core_metadata() out <- core_metadata(c(\"pipapi\", \"wbpip\")) install_pip_packages(branch = \"test\") install_pip_packages(c(\"pipapi\", \"wbpip\"), \"test\") init_metapip()  ! The following packages do not have the updated version of default branch installed: pipapi, pipload, pipfun, and pipaux Do you want to install them now?   1: Yes 2: No  Selection: 1  ── Attaching packages ──────────────────────────────────────────────────────────── metapip 0.0.0.9014 ── ✔ pipapi   1.3.19     (DEV) ✔ pipload  0.2.1      (DEV_v2) ✔ wbpip    0.1.6      (DEV) ✔ pipfun   0.3.0      (DEV_v2) ✔ pipdata  0.0.0.9017 (DEV) ✔ pipr     1.1.0      (main) ✔ pipster  0.0.1.9003 (DEV) ✔ pipaux   0.3.0      (DEV_v2) ✔ pipfaker 0.1.0      (main) set_custom_branch(pipr = 'main', 'pipapi' = 'DEV_v3')"},{"path":"https://pip-technical-team.github.io/metapip/reference/check_github_token.html","id":null,"dir":"Reference","previous_headings":"","what":"make sure your GITHUB credentials are properly setup — check_github_token","title":"make sure your GITHUB credentials are properly setup — check_github_token","text":"make sure GITHUB credentials properly setup","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/check_github_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make sure your GITHUB credentials are properly setup — check_github_token","text":"","code":"check_github_token()"},{"path":"https://pip-technical-team.github.io/metapip/reference/check_github_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make sure your GITHUB credentials are properly setup — check_github_token","text":"invisible TRUE credentials perfectly set","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/check_github_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make sure your GITHUB credentials are properly setup — check_github_token","text":"","code":"if (FALSE) { # \\dontrun{ check_github_token() } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Return meta information about core packages — core_metadata","title":"Return meta information about core packages — core_metadata","text":"Returns information like name package, number branches , last release tag, last release time, last commit author etc.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return meta information about core packages — core_metadata","text":"","code":"core_metadata(package = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return meta information about core packages — core_metadata","text":"package One () core packages, NULL shows information .","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return meta information about core packages — core_metadata","text":"colorDF::colorDF output details core packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return meta information about core packages — core_metadata","text":"","code":"if (FALSE) { # \\dontrun{ core_metadata() core_metadata(c(\"pipapi\", \"wbpip\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get last update time of branches in a package — get_branch_info","title":"Get last update time of branches in a package — get_branch_info","text":"Returns dataframe information package name, branch name, author last commit last commit made branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get last update time of branches in a package — get_branch_info","text":"","code":"get_branch_info(package = \"pipapi\", branch = NULL, display = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get last update time of branches in a package — get_branch_info","text":"package one core package (default \"pipapi\") branch valid branch name package display (default TRUE) want display branches console?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get last update time of branches in a package — get_branch_info","text":"colorDF::colorDF output invisible dataframe","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get last update time of branches in a package — get_branch_info","text":"","code":"if (FALSE) { # \\dontrun{ get_branch_info() get_branch_info(branch = c(\"PROD\", \"QA\"), display = FALSE) get_branch_info(package = \"wbpip\", branch = c(\"PROD\", \"QA\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available branches for a package — get_branches","title":"Get available branches for a package — get_branches","text":"Returns vector branch names package specified. display set TRUE, branch names printed console.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available branches for a package — get_branches","text":"","code":"get_branches(package = \"pipapi\", display = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available branches for a package — get_branches","text":"package one core package name (default \"pipapi\") display (default TRUE) want display name branches console?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available branches for a package — get_branches","text":"invisible character vector branches","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available branches for a package — get_branches","text":"","code":"if (FALSE) { # \\dontrun{   get_branches()   get_branches(\"wbpip\", display = FALSE) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_core_pagkages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get core PIP ecosystem package — get_core_pagkages","title":"Get core PIP ecosystem package — get_core_pagkages","text":"Get core PIP ecosystem package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_core_pagkages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get core PIP ecosystem package — get_core_pagkages","text":"","code":"get_core_pagkages(exclude = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_core_pagkages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get core PIP ecosystem package — get_core_pagkages","text":"exclude character: packages exclude attaching. [getwd] one core PIP packages, package excluded default. avoid , set exclude `NULL`.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_core_pagkages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get core PIP ecosystem package — get_core_pagkages","text":"character vector names PIP packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_core_pagkages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get core PIP ecosystem package — get_core_pagkages","text":"","code":"get_core_pagkages() #> [1] \"pipapi\"   \"pipload\"  \"wbpip\"    \"pipfun\"   \"pipdata\"  \"pipster\"  \"pipaux\"   #> [8] \"pipfaker\" get_core_pagkages(exclude = \"pipdata\") #> [1] \"pipapi\"   \"pipload\"  \"wbpip\"    \"pipfun\"   \"pipster\"  \"pipaux\"   \"pipfaker\""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_current_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"get the current branches that are meant to be used — get_current_branches","title":"get the current branches that are meant to be used — get_current_branches","text":"necessarily mean branches currently installed. [init_metapip] notify case.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_current_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the current branches that are meant to be used — get_current_branches","text":"","code":"get_current_branches(package = NULL, verbose = TRUE)  get_package_current_branch(package)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_current_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the current branches that are meant to be used — get_current_branches","text":"package character: vector name branches. E.g., c(\"pipdata\", \"pipfaker\"). TRUE verbose logical: whether display current branches. Default ","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_current_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the current branches that are meant to be used — get_current_branches","text":"list names packages branches named character vector branches package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_current_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the current branches that are meant to be used — get_current_branches","text":"","code":"get_current_branches() #>  #> ── metapip current branches (default in red): ── #>  #> ◌ pipapi  : DEV    #> ◌ pipload : DEV_v2 #> ◌ wbpip   : DEV    #> ◌ pipfun  : DEV_v2 #> ◌ pipdata : DEV_v2 #> ◌ pipster : DEV    #> ◌ pipaux  : DEV_v2 #> ◌ pipfaker: main   get_package_current_branch(c(\"pipdata\", \"pipfaker\")) #>  pipdata pipfaker  #> \"DEV_v2\"   \"main\""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_default_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default branch in PIP ecosystem — get_default_branch","title":"Get default branch in PIP ecosystem — get_default_branch","text":"Get default branch PIP ecosystem Modify default branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_default_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default branch in PIP ecosystem — get_default_branch","text":"","code":"get_default_branch()  set_default_branch(branch)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_default_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default branch in PIP ecosystem — get_default_branch","text":"branch chracter: name default branch.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_default_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default branch in PIP ecosystem — get_default_branch","text":"name branch name branch invisible","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_default_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default branch in PIP ecosystem — get_default_branch","text":"","code":"get_default_branch() #> [1] \"DEV_v2\" set_default_branch() #> Error in Option(metapip.default_branch = branch): could not find function \"Option\""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details of the branch which was last updated — get_latest_branch_update","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"function useful get latest branch name, author latest commit time last updated.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"","code":"get_latest_branch_update(package = \"pipapi\", display = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"package one core package (default \"pipapi\") display (default TRUE) want display branches console?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"colorDF::colorDF output along invisible single row dataframe","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"","code":"if (FALSE) { # \\dontrun{ get_latest_branch_update() get_latest_branch_update(\"wbpip\", display = FALSE) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/init_metapip.html","id":null,"dir":"Reference","previous_headings":"","what":"Initializes the pip core packages — init_metapip","title":"Initializes the pip core packages — init_metapip","text":"Based options() settings provides option download latest package versions branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/init_metapip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initializes the pip core packages — init_metapip","text":"","code":"init_metapip(exclude = NA, ask = TRUE, answer = 1)  update_pip_packages(exclude = NA, ask = TRUE, answer = 1)"},{"path":"https://pip-technical-team.github.io/metapip/reference/init_metapip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initializes the pip core packages — init_metapip","text":"exclude character: packages exclude attaching. [getwd] one core PIP packages, package excluded default. avoid , set exclude `NULL`. ask logical. Ask user wants install outdated packages. Default TRUE answer numeric: Developers  argument. works demonstration purposes.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/init_metapip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initializes the pip core packages — init_metapip","text":"`init_metapip()` return invisible() output `update_pip_packages()` return logical vector. TRUE missing package   update. FALSE packages date user selects   update.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/init_metapip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initializes the pip core packages — init_metapip","text":"","code":"if (FALSE) { # \\dontrun{   init_metapip() } # }  update_pip_packages(ask = FALSE, answer = 2) # this is to make it work in examples and vignettes. #> ! The following packages do not have the updated version of default branch #> installed: pipapi, pipload, wbpip, pipfun, pipdata, pipster, pipaux, and pipfaker #> ℹ Installing missing packages... #> ℹ Installing branch DEV from package pipapi #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipapi@DEV #> wbpip        (NA -> fd2c687ed...) [GitHub] #> bit          (NA -> 4.6.0       ) [CRAN] #> cpp11        (NA -> 0.5.2       ) [CRAN] #> prettyunits  (NA -> 1.2.0       ) [CRAN] #> progress     (NA -> 1.2.3       ) [CRAN] #> tzdb         (NA -> 0.5.0       ) [CRAN] #> tidyselect   (NA -> 1.2.1       ) [CRAN] #> hms          (NA -> 1.1.3       ) [CRAN] #> bit64        (NA -> 4.6.0-1     ) [CRAN] #> RcppParallel (NA -> 5.1.11-1    ) [CRAN] #> later        (NA -> 1.4.4       ) [CRAN] #> promises     (NA -> 1.3.3       ) [CRAN] #> DBI          (NA -> 1.2.3       ) [CRAN] #> data.table   (NA -> 1.17.8      ) [CRAN] #> assertthat   (NA -> 0.2.1       ) [CRAN] #> vroom        (NA -> 1.6.5       ) [CRAN] #> clipr        (NA -> 0.8.0       ) [CRAN] #> BH           (NA -> 1.87.0-1    ) [CRAN] #> stringfish   (NA -> 0.17.0      ) [CRAN] #> RApiSeria... (NA -> 0.1.4       ) [CRAN] #> triebeard    (NA -> 0.4.1       ) [CRAN] #> swagger      (NA -> 5.17.14.1   ) [CRAN] #> sodium       (NA -> 1.4.0       ) [CRAN] #> httpuv       (NA -> 1.6.16      ) [CRAN] #> webutils     (NA -> 1.2.2       ) [CRAN] #> fstcore      (NA -> 0.10.0      ) [CRAN] #> duckdb       (NA -> 1.4.0       ) [CRAN] #> joyn         (NA -> 0.2.4       ) [CRAN] #> arrow        (NA -> 21.0.0.1    ) [CRAN] #> readr        (NA -> 2.1.5       ) [CRAN] #> qs           (NA -> 0.27.3      ) [CRAN] #> urltools     (NA -> 1.7.3.1     ) [CRAN] #> plumber      (NA -> 1.3.0       ) [CRAN] #> fst          (NA -> 0.9.8       ) [CRAN] #> Downloading GitHub repo PIP-Technical-Team/wbpip@DEV #> tidyselect (NA -> 1.2.1 ) [CRAN] #> generics   (NA -> 0.1.4 ) [CRAN] #> assertthat (NA -> 0.2.1 ) [CRAN] #> data.table (NA -> 1.17.8) [CRAN] #> dplyr      (NA -> 1.1.4 ) [CRAN] #> Installing 5 packages: tidyselect, generics, assertthat, data.table, dplyr #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d198eedcb9/PIP-Technical-Team-wbpip-fd2c687/DESCRIPTION’ ... OK #> * preparing ‘wbpip’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘gd_compute_pip_stats_lb.R’ ‘gd_compute_pip_stats_lq.R’ #>     ‘low-hanging_indicators.R’ ‘md_compute_polarization.R’ #>     ‘md_compute_poverty_stats.R’ ‘md_infer_poverty_line.R’ #> * building ‘wbpip_0.1.6.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Installing 33 packages: bit, cpp11, prettyunits, progress, tzdb, tidyselect, hms, bit64, RcppParallel, later, promises, DBI, data.table, assertthat, vroom, clipr, BH, stringfish, RApiSerialize, triebeard, swagger, sodium, httpuv, webutils, fstcore, duckdb, joyn, arrow, readr, qs, urltools, plumber, fst #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Skipping install of 'wbpip' from a github remote, the SHA1 (fd2c687e) has not changed since last install. #>   Use `force = TRUE` to force installation #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d191c6d5a39/PIP-Technical-Team-pipapi-c001558/DESCRIPTION’ ... OK #> * preparing ‘pipapi’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.3.0) #>   WARNING: Added dependency on R >= 4.3.0 because package code uses the #>   pipe placeholder at the head of a chain of extractions syntax added #>   in R 4.3.0. #>   File(s) using such syntax: #>     ‘utils.R’ #> * building ‘pipapi_1.3.23.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ℹ Installing branch DEV_v2 from package pipload #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipload@DEV_v2 #> pipfun      (NA -> cbb01b10f...) [GitHub] #> zip         (NA -> 2.3.3       ) [CRAN] #> credentials (NA -> 2.0.3       ) [CRAN] #> httr        (NA -> 1.4.7       ) [CRAN] #> gert        (NA -> 2.1.5       ) [CRAN] #> forcats     (NA -> 1.0.0       ) [CRAN] #> pins        (NA -> 1.4.1       ) [CRAN] #> usethis     (NA -> 3.2.1       ) [CRAN] #> haven       (NA -> 2.5.5       ) [CRAN] #> Downloading GitHub repo PIP-Technical-Team/pipfun@DEV_v2 #> rematch    (NA -> 2.0.0) [CRAN] #> cellranger (NA -> 1.1.0) [CRAN] #> forcats    (NA -> 1.0.0) [CRAN] #> readxl     (NA -> 1.4.5) [CRAN] #> haven      (NA -> 2.5.5) [CRAN] #> Installing 5 packages: rematch, cellranger, forcats, readxl, haven #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d191978512f/PIP-Technical-Team-pipfun-cbb01b1/DESCRIPTION’ ... OK #> * preparing ‘pipfun’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> * looking to see if a ‘data/datalist’ file should be added #>   NB: this package now depends on R (>= 4.3.0) #>   WARNING: Added dependency on R >= 4.3.0 because package code uses the #>   pipe placeholder at the head of a chain of extractions syntax added #>   in R 4.3.0. #>   File(s) using such syntax: #>     ‘working_release.R’ #> * building ‘pipfun_0.3.11.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Installing 8 packages: zip, credentials, httr, gert, forcats, pins, usethis, haven #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Skipping install of 'pipfun' from a github remote, the SHA1 (cbb01b10) has not changed since last install. #>   Use `force = TRUE` to force installation #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d1957607b7b/PIP-Technical-Team-pipload-b2e7571/DESCRIPTION’ ... OK #> * preparing ‘pipload’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> Omitted ‘LazyData’ from DESCRIPTION #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘load_dlw_data.R’ ‘load_pip_data.R’ ‘pip_load_all_aux.R’ #>     ‘pip_load_aux.R’ ‘pip_load_cache.R’ ‘pip_load_cache_inventory.R’ #>     ‘pip_merge_aux.R’ ‘pip_read-write.R’ ‘pip_update_inventory.R’ #>     ‘piploadenv.R’ ‘utils.R’ #> * building ‘pipload_0.2.4.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ℹ Installing branch DEV from package wbpip #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Skipping install of 'wbpip' from a github remote, the SHA1 (fd2c687e) has not changed since last install. #>   Use `force = TRUE` to force installation #> ℹ Installing branch DEV_v2 from package pipfun #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Skipping install of 'pipfun' from a github remote, the SHA1 (cbb01b10) has not changed since last install. #>   Use `force = TRUE` to force installation #> ℹ Installing branch DEV_v2 from package pipdata #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipdata@DEV_v2 #> wbpip   (fd2c687ed... -> NA          ) [GitHub] #> pipload (b2e7571f6... -> NA          ) [GitHub] #> pipfun  (cbb01b10f... -> 3d8092aa5...) [GitHub] #> Downloading GitHub repo pip-technical-team/wbpip@dev #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d193c1fb34f/PIP-Technical-Team-wbpip-fd2c687/DESCRIPTION’ ... OK #> * preparing ‘wbpip’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘gd_compute_pip_stats_lb.R’ ‘gd_compute_pip_stats_lq.R’ #>     ‘low-hanging_indicators.R’ ‘md_compute_polarization.R’ #>     ‘md_compute_poverty_stats.R’ ‘md_infer_poverty_line.R’ #> * building ‘wbpip_0.1.6.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Downloading GitHub repo PIP-Technical-Team/pipload@new_pipeline #> Error in utils::download.file(url, path, method = method, quiet = quiet,  :  #>   cannot open URL 'https://api.github.com/repos/PIP-Technical-Team/pipload/tarball/new_pipeline' #> Downloading GitHub repo PIP-Technical-team/pipfun@ongoing #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d197c4d4009/PIP-Technical-Team-pipfun-3d8092a/DESCRIPTION’ ... OK #> * preparing ‘pipfun’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘load_from_gh.R’ ‘pip_create_globals.R’ ‘pip_merge_aux.R’ #> * building ‘pipfun_0.0.0.9018.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d19340e631d/PIP-Technical-Team-pipdata-fb44874/DESCRIPTION’ ... OK #> * preparing ‘pipdata’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> Removed empty directory ‘pipdata/vignettes’ #> * looking to see if a ‘data/datalist’ file should be added #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘pd_add_pip_vars.R’ ‘pd_dlw_clean.R’ ‘update_dlw_inventory.R’ #>     ‘utils.R’ #> * building ‘pipdata_0.0.0.9017.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ℹ Installing branch DEV from package pipster #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipster@DEV #> wbpip (fd2c687ed... -> NA) [GitHub] #> Downloading GitHub repo PIP-Technical-Team/wbpip@dev_stage2 #> Error in utils::download.file(url, path, method = method, quiet = quiet,  :  #>   cannot open URL 'https://api.github.com/repos/PIP-Technical-Team/wbpip/tarball/dev_stage2' #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d191e5c8ef6/PIP-Technical-Team-pipster-1f6b1c8/DESCRIPTION’ ... OK #> * preparing ‘pipster’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 3.5.0) #>   WARNING: Added dependency on R >= 3.5.0 because serialized objects in #>   serialize/load version 3 cannot be read in older versions of R. #>   File(s) containing such objects: #>     ‘pipster/tests/testthat/testdata/gd_ex1.RDS’ #>     ‘pipster/tests/testthat/testdata/gd_ex2.RDS’ #>     ‘pipster/tests/testthat/testdata/local/ago2008.RDS’ #>     ‘pipster/tests/testthat/testdata/local/ago2018.RDS’ #>     ‘pipster/tests/testthat/testdata/local/bdi2013.RDS’ #>     ‘pipster/tests/testthat/testdata/local/idn1990.RDS’ #>     ‘pipster/tests/testthat/testdata/local/nga1996.RDS’ #>     ‘pipster/tests/testthat/testdata/local/nga2003.RDS’ #>     ‘pipster/tests/testthat/testdata/local/ukr1995.RDS’ #>     ‘pipster/tests/testthat/testdata/local/ukr1999.RDS’ #>     ‘pipster/tests/testthat/testdata/local/ukr2002.RDS’ #>     ‘pipster/tests/testthat/testdata/local/zwe2011.RDS’ #>     ‘pipster/tests/testthat/testdata/local/zwe2017.RDS’ #>     ‘pipster/tests/testthat/testdata/md_lorenz1.RDS’ #>     ‘pipster/tests/testthat/testdata/md_lorenz2.RDS’ #>     ‘pipster/tests/testthat/testdata/md_lorenz3.RDS’ #>     ‘pipster/tests/testthat/testdata/synthetic-microdata.RDS’ #>   NB: this package now depends on R (>= 4.2.0) #>   WARNING: Added dependency on R >= 4.2.0 because package code uses the #>   pipe placeholder syntax added in R 4.2.0 #>   File(s) using such syntax: #>     ‘create_pipster_object.R’ ‘pipgd_dist.R’ ‘pipgd_pov.R’ #> * building ‘pipster_0.0.1.9003.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ℹ Installing branch DEV_v2 from package pipaux #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipaux@DEV_v2 #> pipfun       (3d8092aa5... -> cbb01b10f...) [GitHub] #> commonmark   (NA           -> 2.0.0       ) [CRAN] #> sourcetools  (NA           -> 0.1.7-1     ) [CRAN] #> xtable       (NA           -> 1.8-4       ) [CRAN] #> shiny        (NA           -> 1.11.1      ) [CRAN] #> semantic.... (NA           -> 1.1.0       ) [CRAN] #> htmlwidgets  (NA           -> 1.6.4       ) [CRAN] #> timechange   (NA           -> 0.3.0       ) [CRAN] #> uuid         (NA           -> 1.2-1       ) [CRAN] #> here         (NA           -> 1.0.2       ) [CRAN] #> getPass      (NA           -> 0.2-4       ) [CRAN] #> tidyr        (NA           -> 1.3.1       ) [CRAN] #> shiny.sem... (NA           -> 0.5.1       ) [CRAN] #> assertr      (NA           -> 3.0.1       ) [CRAN] #> lubridate    (NA           -> 1.9.4       ) [CRAN] #> blastula     (NA           -> 0.3.6       ) [CRAN] #> data.vali... (NA           -> 0.2.1       ) [CRAN] #> wbstats      (NA           -> 1.1         ) [CRAN] #> Installing 17 packages: commonmark, sourcetools, xtable, shiny, semantic.assets, htmlwidgets, timechange, uuid, here, getPass, tidyr, shiny.semantic, assertr, lubridate, blastula, data.validator, wbstats #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> Downloading GitHub repo PIP-Technical-Team/pipfun@DEV_v2 #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d192219dbda/PIP-Technical-Team-pipfun-cbb01b1/DESCRIPTION’ ... OK #> * preparing ‘pipfun’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> * looking to see if a ‘data/datalist’ file should be added #>   NB: this package now depends on R (>= 4.3.0) #>   WARNING: Added dependency on R >= 4.3.0 because package code uses the #>   pipe placeholder at the head of a chain of extractions syntax added #>   in R 4.3.0. #>   File(s) using such syntax: #>     ‘working_release.R’ #> * building ‘pipfun_0.3.11.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d1934c9ef9e/PIP-Technical-Team-pipaux-c8bc347/DESCRIPTION’ ... OK #> * preparing ‘pipaux’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> Omitted ‘LazyData’ from DESCRIPTION #>   NB: this package now depends on R (>= 4.2.0) #>   WARNING: Added dependency on R >= 4.2.0 because package code uses the #>   pipe placeholder syntax added in R 4.2.0 #>   File(s) using such syntax: #>     ‘aux_fun.R’ ‘identify_changes.R’ ‘old_update_aux.R’ #> * building ‘pipaux_0.3.0.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ℹ Installing branch main from package pipfaker #> Using github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead. #> Downloading GitHub repo PIP-Technical-Team/pipfaker@main #> wbpip (fd2c687ed... -> NA) [GitHub] #> Downloading GitHub repo pip-technical-team/wbpip@dev #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d196c1f7490/PIP-Technical-Team-wbpip-fd2c687/DESCRIPTION’ ... OK #> * preparing ‘wbpip’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘gd_compute_pip_stats_lb.R’ ‘gd_compute_pip_stats_lq.R’ #>     ‘low-hanging_indicators.R’ ‘md_compute_polarization.R’ #>     ‘md_compute_poverty_stats.R’ ‘md_infer_poverty_line.R’ #> * building ‘wbpip_0.1.6.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/RtmpJNXEMK/remotes1d19309313d2/PIP-Technical-Team-pipfaker-5070978/DESCRIPTION’ ... OK #> * preparing ‘pipfaker’: #> * checking DESCRIPTION meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #>   NB: this package now depends on R (>= 4.1.0) #>   WARNING: Added dependency on R >= 4.1.0 because package code uses the #>   pipe |> or function shorthand \\(...) syntax added in R 4.1.0. #>   File(s) using such syntax: #>     ‘fk_micro_gen.R’ ‘fk_pip.R’ ‘utils.R’ #> * building ‘pipfaker_0.2.1.tar.gz’ #>  #> Installing package into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified)"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Install branch from a package — install_branch","title":"Install branch from a package — install_branch","text":"Install branch package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install branch from a package — install_branch","text":"","code":"install_branch(package = \"pipapi\", branch = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install branch from a package — install_branch","text":"package one core package name (default \"pipapi\") branch valid branch name (default \"DEV_v2\")","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install branch from a package — install_branch","text":"","code":"if (FALSE) { # \\dontrun{   install_branch()   install_branch(\"pipfun\", \"ongoing\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Install latest branch from a package — install_latest_branch","title":"Install latest branch from a package — install_latest_branch","text":"Based last commit branch installs latest branch package.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install latest branch from a package — install_latest_branch","text":"","code":"install_latest_branch(package = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install latest branch from a package — install_latest_branch","text":"package one () core packages. default NULL install latest branch packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install latest branch from a package — install_latest_branch","text":"","code":"if (FALSE) { # \\dontrun{   install_latest_branch()   install_latest_branch(c(\"pipfun\", \"pipapi\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Install one (or more) pip core packages from a branch. — install_pip_packages","title":"Install one (or more) pip core packages from a branch. — install_pip_packages","text":"installs packages like pipapi, pipaux, pipload, wbpip, pipfun, pipdata branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install one (or more) pip core packages from a branch. — install_pip_packages","text":"","code":"install_pip_packages(package = NULL, branch = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install one (or more) pip core packages from a branch. — install_pip_packages","text":"package one () core package name, NULL core packages installed branch branch valid branch name (default \"PROD\")","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install one (or more) pip core packages from a branch. — install_pip_packages","text":"invisible NULL","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install one (or more) pip core packages from a branch. — install_pip_packages","text":"","code":"if (FALSE) { # \\dontrun{ install_pip_packages(branch = \"test\") install_pip_packages(package = \"wbpip\", branch = \"DEV\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metapip: Easily Install, Load, and manage PIP Packages — metapip-package","title":"metapip: Easily Install, Load, and manage PIP Packages — metapip-package","text":"package helps install latest branch PIP packages, get information packages many things. enabled via Github API.","code":""},{"path":[]},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metapip: Easily Install, Load, and manage PIP Packages — metapip-package","text":"Maintainer: R.Andrés Castañeda acastanedaa@worldbank.org Authors: Ronak Shah shahronak47@yahoo.contributors: World Bank [copyright holder]","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip.html","id":null,"dir":"Reference","previous_headings":"","what":"metapip: PIP packages manager — metapip","title":"metapip: PIP packages manager — metapip","text":"goal metapip provide user set functions allow /work efficiently PIP R packages. technical world PIP consist several packages interact load, format, modify, estimate data PIP system. Given number packages increased time, necessary create meta package whose objective proper management PIP packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip.html","id":"metapip-functions","dir":"Reference","previous_headings":"","what":"metapip functions","title":"metapip: PIP packages manager — metapip","text":"metapip functions ...","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List all packages in metapip — metapip_packages","title":"List all packages in metapip — metapip_packages","text":"List packages metapip","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all packages in metapip — metapip_packages","text":"","code":"metapip_packages(include_self = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all packages in metapip — metapip_packages","text":"include_self Include metapip list?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all packages in metapip — metapip_packages","text":"","code":"metapip_packages() #>  [1] \"cli\"        \"glue\"       \"gh\"         \"rstudioapi\" \"remotes\"    #>  [6] \"gitcreds\"   \"collapse\"   \"rlang\"      \"colorDF\"    \"metapip\""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update metapip packages — metapip_update","title":"Update metapip packages — metapip_update","text":"check see metapip packages (optionally, dependencies) --date, install interactive confirmation.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update metapip packages — metapip_update","text":"","code":"metapip_update(pkg = \"metapip\", recursive = FALSE, ...)"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update metapip packages — metapip_update","text":"pkg character string model updated. recursive `TRUE`, also check dependencies metapip packages. ... Extra arguments pass [utils::install.packages()]","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update metapip packages — metapip_update","text":"Nothing returned message printed  console packages () installed along  code .","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update metapip packages — metapip_update","text":"","code":"if (FALSE) { # \\dontrun{ metapip_update() } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","text":"Status tables package versions different branches along local installations. local installation,status column returned indicates local version ahead behind DEV_v2 branch.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","text":"","code":"package_branches(   package = NULL,   branch_to_compare = getOption(\"metapip.default_branch\") )"},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","text":"package One () PIP core packages. Default NULL include packages branch_to_compare character: names branch compare . Default \"DEV_v2\".","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","text":"table pip packages corresponding package versions   branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV_v2 branch. — package_branches","text":"","code":"if (FALSE) { # \\dontrun{ package_branches() package_branches(c(\"pipapi\", \"wbpip\")) package_branches(branch_to_compare = \"QA\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"List all dependencies — pkg_deps","title":"List all dependencies — pkg_deps","text":"List dependencies","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all dependencies — pkg_deps","text":"","code":"pkg_deps(x = \"metapip\", recursive = FALSE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all dependencies — pkg_deps","text":"x character string packages evaluated. recursive `TRUE`, also list dependencies metapip packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/print.metapip_simplelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty print for metapip_simplelist objects — print.metapip_simplelist","title":"Pretty print for metapip_simplelist objects — print.metapip_simplelist","text":"Prints named list character vectors (possibly empty) readable way using cli package.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/print.metapip_simplelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty print for metapip_simplelist objects — print.metapip_simplelist","text":"","code":"# S3 method for class 'metapip_simplelist' print(x, ...)"},{"path":"https://pip-technical-team.github.io/metapip/reference/print.metapip_simplelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty print for metapip_simplelist objects — print.metapip_simplelist","text":"x named list character vectors (class 'metapip_simplelist'). ... arguments passed methods (ignored).","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/rowname_to_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","title":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","text":"Non tidyverse alternative tibble::rownames_to_column","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/rowname_to_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","text":"","code":"rowname_to_column(data, var)"},{"path":"https://pip-technical-team.github.io/metapip/reference/rowname_to_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","text":"data Dataframe var column name store rownames","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/rowname_to_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","text":"Dataframe additional column rownames","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/rowname_to_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non tidyverse alternative to tibble::rownames_to_column — rowname_to_column","text":"","code":"if (FALSE) { # \\dontrun{ rowname_to_column(mtcars, \"rn\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/rs_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Set theme for colorDF — rs_theme","title":"Set theme for colorDF — rs_theme","text":"Set theme colorDF","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/rs_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set theme for colorDF — rs_theme","text":"","code":"rs_theme()"},{"path":"https://pip-technical-team.github.io/metapip/reference/rs_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set theme for colorDF — rs_theme","text":"invisible RStudio theme","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_colorDF.html","id":null,"dir":"Reference","previous_headings":"","what":"identify RStudio theme — set_colorDF","title":"identify RStudio theme — set_colorDF","text":"identify RStudio theme","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_colorDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"identify RStudio theme — set_colorDF","text":"","code":"set_colorDF()"},{"path":"https://pip-technical-team.github.io/metapip/reference/set_colorDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"identify RStudio theme — set_colorDF","text":"invisible RStudio theme","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_custom_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default custom branching options — set_custom_branch","title":"Set default custom branching options — set_custom_branch","text":"Set default custom branching options Get Custom branches","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_custom_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default custom branching options — set_custom_branch","text":"","code":"set_custom_branch(...)  get_custom_branch(package = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/set_custom_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default custom branching options — set_custom_branch","text":"... Named elements added updated custom default list. package character: vector name branches. E.g., c(\"pipdata\", \"pipfaker\"). Default return packages whose default  branches customed.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_custom_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default custom branching options — set_custom_branch","text":"invisible custom branches Names list packages corresponding branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/set_custom_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default custom branching options — set_custom_branch","text":"","code":"if (FALSE) { # \\dontrun{ set_custom_branch(pipr = 'main', 'pipapi' = 'DEV_v3') } # } get_custom_branch() #>  #> ── metapip custom branches: ── #>  #> ◌ pipapi  : DEV  #> ◌ pipfaker: main #> ◌ wbpip   : DEV  #> ◌ pipster : DEV"},{"path":"https://pip-technical-team.github.io/metapip/news/index.html","id":"metapip-001","dir":"Changelog","previous_headings":"","what":"metapip 0.0.1","title":"metapip 0.0.1","text":"Remove dependencies tidyverse packages dplyr, tidyr, purrr, magrittr tibble. add suit update packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/news/index.html","id":"metapip-0009010","dir":"Changelog","previous_headings":"","what":"metapip 0.0.0.9010","title":"metapip 0.0.0.9010","text":"Add new package_branches() function show package versions branches.","code":""},{"path":"https://pip-technical-team.github.io/metapip/news/index.html","id":"metapip-0009008","dir":"Changelog","previous_headings":"","what":"metapip 0.0.0.9008","title":"metapip 0.0.0.9008","text":"Unload packages installing (#3)","code":""}]
