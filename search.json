[{"path":"https://pip-technical-team.github.io/metapip/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 metapip authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pip-technical-team.github.io/metapip/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andrés Castañeda. Author, maintainer. Ronak Shah. Author. World Bank. Copyright holder.","code":""},{"path":"https://pip-technical-team.github.io/metapip/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castañeda R, Shah R (2025). metapip: Easily Install, Load, manage PIP Packages. R package version 0.0.0.9010, https://github.com/PIP-Technical-Team/metapip.","code":"@Manual{,   title = {metapip: Easily Install, Load, and manage PIP Packages},   author = {R.Andrés Castañeda and Ronak Shah},   year = {2025},   note = {R package version 0.0.0.9010},   url = {https://github.com/PIP-Technical-Team/metapip}, }"},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"metapip","dir":"","previous_headings":"","what":"Easily Install, Load, and manage PIP Packages","title":"Easily Install, Load, and manage PIP Packages","text":"goal metapip provide user set functions allow /work efficiently PIP R packages. technical world PIP consist several packages interact load, format, modify, estimate data PIP system. Given number packages increased time, necessary create meta package whose objective proper management PIP packages. metapip highly inspired {tidyverse}, functions just simple refactoring tidyverse functions. credit, , goes Tidyerse team. Thank ! addition basic functionality attaching installing PIP-related R packages, metapip also works manager packages working environment always working right version PIP packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"core-packages","dir":"","previous_headings":"","what":"Core packages","title":"Easily Install, Load, and manage PIP Packages","text":"core PIP R packages pipapi pipaux pipload wbpip pipfun pipdata pipr","code":""},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Install, Load, and manage PIP Packages","text":"can install development version metapip GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"PIP-Technical-Team/metapip\")"},{"path":"https://pip-technical-team.github.io/metapip/index.html","id":"functions-and-its-usage-in-metapip","dir":"","previous_headings":"","what":"Functions and it’s usage in metapip","title":"Easily Install, Load, and manage PIP Packages","text":"Since metapip works Github API lot required github token environment. can generate token set environment variable shown . Let us now go functions metapip. get_branches() function name suggests gives available branches particular pip package GitHub. display console available branches. time also returns branch name character vector invisibly. argument called display set TRUE default. argument controls want show branch names console . install_branch() installs specific branch particular package. command install DEV branch wbpip package. get_branch_info() function give information particular branch package. example, last commit done branch . may pass one branch names. install_latest_branch() function installs packages branch last updated .e latest branch. pass arguments , install latest branch pip core R packages. However, can also restrict packages well. core_metadata() Get metadata information pip packages. install_all_packages() Install one core packages specific branch. fresh installation R running install_all_packages() set pip packages.","code":"library(metapip) Sys.setenv(GITHUB_PAT = \"code\") get_branches(\"pipr\")     #── These are available branches for pipr package:   #• 29-website-formatting #• 61_global_end #• DEV #• add_retry #• default_options #• fix_popshare #• gh-pages #• httr2 #• main #• test out <- get_branches(\"pipr\")  #── These are available branches for pipr package:   #• 29-website-formatting #• 61_global_end #• DEV #• add_retry #• default_options #• fix_popshare #• gh-pages #• httr2 #• main #• test  out #[1] \"29-website-formatting\" \"61_global_end\"         \"DEV\"                   \"add_retry\"             #[5] \"default_options\"       \"fix_popshare\"          \"gh-pages\"              \"httr2\"                 #[9] \"main\"                  \"test\" out <- get_branches(\"pipr\", display = FALSE)   out #[1] \"29-website-formatting\" \"61_global_end\"         \"DEV\"                   \"add_retry\"             #[5] \"default_options\"       \"fix_popshare\"          \"gh-pages\"              \"httr2\"                 #[9] \"main\"                  \"test\" install_branch(package = \"wbpip\", branch = \"DEV\") get_branch_info(package = \"pipr\", branch = \"DEV\")  #  package branch_name last_commit_author_name     last_update_time #1    pipr         DEV               Tony Fujs 2023-09-04T13:06:47Z get_branch_info(package = \"wbpip\", branch = c(\"PROD\", \"QA\"))  #  package branch_name last_commit_author_name     last_update_time #1   wbpip        PROD               Tony Fujs 2023-09-20T08:02:24Z #2   wbpip          QA                tonyfujs 2023-07-14T08:50:33Z install_latest_branch() install_latest_branch(c(\"pipfun\", \"pipapi\")) out <- core_metadata() out <- core_metadata(c(\"pipapi\", \"wbpip\")) install_all_packages(branch = \"test\") install_all_packages(c(\"pipapi\", \"wbpip\"), \"test\")"},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Return meta information about core packages — core_metadata","title":"Return meta information about core packages — core_metadata","text":"Return meta information core packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return meta information about core packages — core_metadata","text":"","code":"core_metadata(package = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return meta information about core packages — core_metadata","text":"package One () core packages, NULL shows information .","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return meta information about core packages — core_metadata","text":"knitr::kable output details core packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/core_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return meta information about core packages — core_metadata","text":"","code":"if (FALSE) { # \\dontrun{ core_metadata() core_metadata(c(\"pipapi\", \"wbpip\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get last update time of branches in a specific package — get_branch_info","title":"Get last update time of branches in a specific package — get_branch_info","text":"Get last update time branches specific package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get last update time of branches in a specific package — get_branch_info","text":"","code":"get_branch_info(package = \"pipapi\", branch = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get last update time of branches in a specific package — get_branch_info","text":"package one core package (default \"pipapi\") branch valid branch name specified package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get last update time of branches in a specific package — get_branch_info","text":"dataframe","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branch_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get last update time of branches in a specific package — get_branch_info","text":"","code":"if (FALSE) { # \\dontrun{ get_branch_info() get_branch_info(branch = c(\"PROD\", \"QA\")) get_branch_info(package = \"wbpip\", branch = c(\"PROD\", \"QA\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available branches for a particular package — get_branches","title":"Get available branches for a particular package — get_branches","text":"Get available branches particular package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available branches for a particular package — get_branches","text":"","code":"get_branches(package = \"pipapi\", display = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available branches for a particular package — get_branches","text":"package one core package name (default \"pipapi\") display (default TRUE) want display branches console?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available branches for a particular package — get_branches","text":"invisible character vector branches","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available branches for a particular package — get_branches","text":"","code":"if (FALSE) { # \\dontrun{   get_branches()   get_branches(\"pipr\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details of the branch which was last updated — get_latest_branch_update","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"Get details branch last updated","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"","code":"get_latest_branch_update(package = \"pipapi\")"},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"package one core package (default \"pipapi\")","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"single row dataframe","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/get_latest_branch_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details of the branch which was last updated — get_latest_branch_update","text":"","code":"if (FALSE) { # \\dontrun{ get_latest_branch_update() get_latest_branch_update(\"pipr\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Install branch from a package — install_branch","title":"Install branch from a package — install_branch","text":"Install branch package","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install branch from a package — install_branch","text":"","code":"install_branch(package = \"pipapi\", branch = \"DEV\")"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install branch from a package — install_branch","text":"package one core package name (default \"pipapi\") branch valid branch name (default \"DEV\")","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install branch from a package — install_branch","text":"","code":"if (FALSE) { # \\dontrun{   install_branch()   install_branch(\"pipfun\", \"ongoing\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Install latest branch from core packages — install_latest_branch","title":"Install latest branch from core packages — install_latest_branch","text":"Install latest branch core packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install latest branch from core packages — install_latest_branch","text":"","code":"install_latest_branch(package = NULL)"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install latest branch from core packages — install_latest_branch","text":"package one () core packages. default NULL install latest branch packages","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_latest_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install latest branch from core packages — install_latest_branch","text":"","code":"if (FALSE) { # \\dontrun{   install_latest_branch()   install_latest_branch(c(\"pipfun\", \"pipapi\")) } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","title":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","text":"includes packages like pipapi, pipaux, pipload, wbpip, pipfun, pipdata pipr","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","text":"","code":"install_pip_packages(package = NULL, branch = \"PROD\")"},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","text":"package one () core package name, NULL core packages installed branch branch valid branch name (default \"PROD\")","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","text":"invisible NULL","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/install_pip_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install one (or more) pip core packages from a specific branch. — install_pip_packages","text":"","code":"if (FALSE) { # \\dontrun{ install_all_packages(branch = \"test\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip.html","id":null,"dir":"Reference","previous_headings":"","what":"metapip: PIP packages manager — metapip","title":"metapip: PIP packages manager — metapip","text":"goal metapip provide user set functions allow /work efficiently PIP R packages. technical world PIP consist several packages interact load, format, modify, estimate data PIP system. Given number packages increased time, necessary create meta package whose objective proper management PIP packages.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip.html","id":"metapip-functions","dir":"Reference","previous_headings":"","what":"metapip functions","title":"metapip: PIP packages manager — metapip","text":"metapip functions ...","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List all packages in metapip — metapip_packages","title":"List all packages in metapip — metapip_packages","text":"List packages metapip","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all packages in metapip — metapip_packages","text":"","code":"metapip_packages(include_self = TRUE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all packages in metapip — metapip_packages","text":"include_self Include metapip list?","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all packages in metapip — metapip_packages","text":"","code":"metapip_packages() #>  [1] \"cli\"        \"glue\"       \"dplyr\"      \"purrr\"      \"gh\"         #>  [6] \"rstudioapi\" \"tibble\"     \"remotes\"    \"rlang\"      \"magrittr\"   #> [11] \"metapip\""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update metapip packages — metapip_update","title":"Update metapip packages — metapip_update","text":"check see metapip packages (optionally, dependencies) --date, install interactive confirmation.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update metapip packages — metapip_update","text":"","code":"metapip_update(pkg = \"metapip\", recursive = FALSE, ...)"},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update metapip packages — metapip_update","text":"pkg character string model updated. recursive `TRUE`, also check dependencies metapip packages. ... Extra arguments pass [utils::install.packages()]","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update metapip packages — metapip_update","text":"Nothing returned message printed  console packages () installed along  code .","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/metapip_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update metapip packages — metapip_update","text":"","code":"if (FALSE) { # \\dontrun{ metapip_update() } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","text":"Status tables package versions different branches along local installations. local installation,status column returned indicates local version ahead behind DEV branch.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","text":"","code":"package_branches(package = NULL, branch_to_compare = \"DEV\")"},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","text":"package One () PIP core packages. Default NULL include packages branch_to_compare chacter: names branch compare . Default \"DEV\".","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","text":"tibble pip packages corresponding package versions   branch","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/package_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status tables of package versions in different branches along with local installations. For local installation,a status column is returned which indicates if the local version is ahead or behind the DEV branch. — package_branches","text":"","code":"if (FALSE) { # \\dontrun{ package_branches() package_branches(c(\"pipapi\", \"wbpip\")) package_branches(branch_to_compare = \"QA\") } # }"},{"path":"https://pip-technical-team.github.io/metapip/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pip-technical-team.github.io/metapip/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"List all dependencies — pkg_deps","title":"List all dependencies — pkg_deps","text":"List dependencies","code":""},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all dependencies — pkg_deps","text":"","code":"pkg_deps(x = \"metapip\", recursive = FALSE)"},{"path":"https://pip-technical-team.github.io/metapip/reference/pkg_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all dependencies — pkg_deps","text":"x character string packages evaluated. recursive `TRUE`, also list dependencies metapip packages.","code":""},{"path":[]},{"path":"https://pip-technical-team.github.io/metapip/news/index.html","id":"metapip-0009010","dir":"Changelog","previous_headings":"","what":"metapip 0.0.0.9010","title":"metapip 0.0.0.9010","text":"Add new package_branches() function show package versions branches.","code":""},{"path":"https://pip-technical-team.github.io/metapip/news/index.html","id":"metapip-0009008","dir":"Changelog","previous_headings":"","what":"metapip 0.0.0.9008","title":"metapip 0.0.0.9008","text":"Unload packages installing (#3)","code":""}]
